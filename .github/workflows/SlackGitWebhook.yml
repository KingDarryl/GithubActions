name: Branch Protection Slack Notifier

on:
  branch_protection_rule:
    types: [created, deleted, updated]
  workflow_dispatch:  # Add manual trigger for testing

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Payload: ${{ toJson(github.event) }}"
          
      - name: Send Slack Notification
        uses: actions/github-script@v6
        with:
          script: |
            try {
              console.log('Starting Slack notification...');
              console.log('Event payload:', JSON.stringify(context.payload, null, 2));
              
              // Get the event details
              const event = context.payload;
              const rule = event.rule;
              const repository = event.repository;
              const sender = event.sender;
              
              console.log('Rule details:', JSON.stringify(rule, null, 2));
              console.log('Repository details:', JSON.stringify(repository, null, 2));
              console.log('Sender details:', JSON.stringify(sender, null, 2));
              
              // Format the message for Slack
              const message = {
                blocks: [
                  {
                    type: "header",
                    text: {
                      type: "plain_text",
                      text: `ðŸš¨ Branch Protection Rule ${event.action.toUpperCase()}`
                    }
                  },
                  {
                    type: "section",
                    fields: [
                      {
                        type: "mrkdwn",
                        text: `*Repository:*\n${repository.full_name}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Changed by:*\n${sender.login}`
                      }
                    ]
                  },
                  {
                    type: "section",
                    fields: [
                      {
                        type: "mrkdwn",
                        text: `*Branch Pattern:*\n${rule.pattern}`
                      },
                      {
                        type: "mrkdwn",
                        text: `*Rule Type:*\n${rule.type}`
                      }
                    ]
                  }
                ]
              };

              // Add changes section if it's an update
              if (event.action === 'updated' && rule.changes) {
                const changes = Object.entries(rule.changes).map(([key, value]) => 
                  `â€¢ ${key}: ${JSON.stringify(value)}`
                ).join('\n');
                
                message.blocks.push({
                  type: "section",
                  text: {
                    type: "mrkdwn",
                    text: `*Changes:*\n\`\`\`\n${changes}\n\`\`\``
                  }
                });
              }

              // Add timestamp
              message.blocks.push({
                type: "context",
                elements: [
                  {
                    type: "mrkdwn",
                    text: `Time: ${new Date().toISOString()}`
                  }
                ]
              });

              console.log('Sending message to Slack:', JSON.stringify(message, null, 2));
              
              // Send to Slack
              await github.request({
                method: 'POST',
                url: process.env.SLACK_WEBHOOK_URL,
                headers: {
                  'Content-Type': 'application/json',
                },
                data: message
              });
              
              console.log('Slack notification sent successfully');
              
            } catch (error) {
              console.error('Error sending Slack notification:', error);
              console.error('Error details:', {
                status: error.status,
                message: error.message,
                documentation_url: error.documentation_url
              });
              throw error;
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
