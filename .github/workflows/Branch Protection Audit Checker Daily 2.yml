name: Branch Protection Audit Checker Daily

on:
  schedule:
    - cron: '0 0 * * *'  # Runs at midnight every day
  workflow_dispatch:     # Allows manual triggering

permissions: {}  # No default GITHUB_TOKEN permissions needed since we're using PAT

jobs:
  check-audit-log:
    runs-on: ubuntu-latest
    steps:
      - name: Check Audit Log for Branch Protection Changes
        uses: actions/github-script@v6
        with:
          # Note: PAT_TOKEN needs read:audit_log scope to read organization audit logs
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              console.log('Starting audit log check...');
              console.log('Repository:', context.repo.owner + '/' + context.repo.repo);
              
              // Get the current timestamp and 24 hours ago timestamp
              const now = new Date();
              const yesterday = new Date(now.getTime() - (24 * 60 * 60 * 1000));
              
              // Format dates for the query
              const fromDate = yesterday.toISOString().split('T')[0];
              const toDate = now.toISOString().split('T')[0];
              
              // Query the audit log for any branch protection changes
              const response = await github.request('GET /orgs/{org}/audit-log', {
                org: context.repo.owner,
                phrase: `repo:${context.repo.repo} created:${fromDate}..${toDate}`,
                include: ['all'],
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28',
                  'Accept': 'application/vnd.github.v3+json'
                }
              });
              
              const events = response.data;
              console.log('Audit log response:', JSON.stringify(events, null, 2));
              
              // Filter for branch protection related events
              const branchProtectionEvents = events.filter(event => 
                event.action.includes('protected_branch') || 
                event.action.includes('branch_protection')
              );
              
              if (branchProtectionEvents.length > 0) {
                console.log('Found branch protection changes in audit log');
                
                // Create a detailed message about the changes
                const changeDetails = branchProtectionEvents.map(event => {
                  const time = new Date(event.created_at).toISOString();
                  const actor = event.actor;
                  const action = event.action;
                  const branch = event.data?.protected_branch_name || 'unknown';
                  const changes = event.data?.changes || {};
                  
                  let changeDetails = `‚Ä¢ Time: ${time}\n` +
                                    `  Actor: ${actor}\n` +
                                    `  Action: ${action}\n` +
                                    `  Branch: ${branch}`;
                  
                  if (Object.keys(changes).length > 0) {
                    changeDetails += `\n  Changes:\n` +
                                   Object.entries(changes).map(([key, value]) => 
                                     `    - ${key}: ${JSON.stringify(value)}`
                                   ).join('\n');
                  }
                  
                  return changeDetails;
                }).join('\n\n');
                
                const notificationText = `üö® Branch Protection Changes Detected!\n\n` +
                  `Repository: ${context.repo.owner}/${context.repo.repo}\n` +
                  `Time Period: Last 24 hours\n\n` +
                  `Changes Found:\n${changeDetails}`;
                
                // Send to Slack
                await github.request({
                  method: 'POST',
                  url: process.env.SLACK_WEBHOOK_URL,
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  data: {
                    text: "üö® Branch Protection Changes Alert",
                    blocks: [
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: notificationText
                        }
                      }
                    ]
                  }
                });
              } else {
                console.log('No branch protection changes found in the last 24 hours');
                
                // Send "all clear" message to Slack
                await github.request({
                  method: 'POST',
                  url: process.env.SLACK_WEBHOOK_URL,
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  data: {
                    text: "‚úÖ Branch Protection Status",
                    blocks: [
                      {
                        type: "section",
                        text: {
                          type: "mrkdwn",
                          text: `No branch protection changes detected in the last 24 hours\n` +
                                `Repository: ${context.repo.owner}/${context.repo.repo}`
                        }
                      }
                    ]
                  }
                });
              }
              
            } catch (error) {
              console.error('Error checking audit log:', error);
              console.error('Error details:', {
                status: error.status,
                message: error.message,
                documentation_url: error.documentation_url
              });
              
              // Send error to Slack
              await github.request({
                method: 'POST',
                url: process.env.SLACK_WEBHOOK_URL,
                headers: {
                  'Content-Type': 'application/json',
                },
                data: {
                  text: "‚ö†Ô∏è Error Checking Branch Protection Audit Log",
                  blocks: [
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: `Error checking audit log:\n\`\`\`\n${error.message}\n\`\`\``
                      }
                    }
                  ]
                }
              });
              
              throw error;
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
