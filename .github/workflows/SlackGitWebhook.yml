name: Branch Protection Slack Notifier

on:
  branch_protection_rule:
    types: [created, deleted, edited]
  workflow_dispatch:  # Keep manual trigger for testing

permissions:
  contents: read
  pull-requests: read

jobs:
  notify-slack:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Event
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event action: ${{ github.event.action }}"
          echo "Repository: ${{ github.repository }}"
          echo "Full payload:"
          echo "${{ toJson(github.event) }}"
          
      - name: Send Slack Notification
        uses: actions/github-script@v6
        with:
          script: |
            try {
              console.log('Starting Slack notification...');
              console.log('Event name:', context.eventName);
              console.log('Event action:', context.payload.action);
              console.log('Full event payload:', JSON.stringify(context.payload, null, 2));
              
              // Get the event details
              const event = context.payload;
              
              // Handle manual trigger
              if (context.eventName === 'workflow_dispatch') {
                const message = {
                  blocks: [
                    {
                      type: "header",
                      text: {
                        type: "plain_text",
                        text: "üîç Branch Protection Test Notification"
                      }
                    },
                    {
                      type: "section",
                      text: {
                        type: "mrkdwn",
                        text: "This is a test notification from the Branch Protection Slack Notifier workflow."
                      }
                    },
                    {
                      type: "context",
                      elements: [
                        {
                          type: "mrkdwn",
                          text: `Time: ${new Date().toISOString()}`
                        }
                      ]
                    }
                  ]
                };
                
                console.log('Sending test message to Slack:', JSON.stringify(message, null, 2));
                await github.request({
                  method: 'POST',
                  url: process.env.SLACK_WEBHOOK_URL,
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  data: message
                });
                console.log('Test notification sent successfully');
                return;
              }
              
              // Handle branch protection rule changes
              if (context.eventName === 'branch_protection_rule') {
                console.log('Processing branch protection rule event');
                console.log('Action:', event.action);
                console.log('Rule:', JSON.stringify(event.rule, null, 2));
                
                const rule = event.rule;
                const repository = event.repository;
                const sender = event.sender;
                
                const message = {
                  blocks: |
                    [
                      {
                        "type": "header",
                        "text": {
                          "type": "plain_text",
                          "text": "Branch Protection Rule Change Detected"
                        }
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Repository:*\n${{ github.event.repository.full_name }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Repository URL:*\n${{ github.event.repository.html_url }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Repository Name:*\n${{ github.event.repository.name }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Repository Owner:*\n${{ github.event.repository.owner.login }}"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Changed by:*\n${{ github.event.sender.login }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*User Profile:*\n${{ github.event.sender.html_url }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*User Avatar:*\n${{ github.event.sender.avatar_url }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Installation ID:*\n${{ github.event.installation.id }}"
                          }
                        ]
                      },
                      {
                        "type": "section",
                        "fields": [
                          {
                            "type": "mrkdwn",
                            "text": "*Branch Pattern:*\n${{ github.event.rule.pattern }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Rule Type:*\n${{ github.event.rule.type }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Rule ID:*\n${{ github.event.rule.id }}"
                          },
                          {
                            "type": "mrkdwn",
                            "text": "*Action:*\n${{ github.event.action }}"
                          }
                        ]
                      },
                      {
                        "type": "context",
                        "elements": [
                          {
                            "type": "mrkdwn",
                            "text": "Event triggered at: ${{ github.event.created_at }}"
                          }
                        ]
                      }
                    ]
                };

                // Add timestamp
                message.blocks.push({
                  type: "context",
                  elements: [
                    {
                      type: "mrkdwn",
                      text: `Time: ${new Date().toISOString()}`
                    }
                  ]
                });

                console.log('Sending branch protection change message to Slack:', JSON.stringify(message, null, 2));
                await github.request({
                  method: 'POST',
                  url: process.env.SLACK_WEBHOOK_URL,
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  data: message
                });
                console.log('Branch protection change notification sent successfully');
                return;
              }
              
            } catch (error) {
              console.error('Error sending Slack notification:', error);
              console.error('Error details:', {
                status: error.status,
                message: error.message,
                documentation_url: error.documentation_url
              });
              throw error;
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
